/* 
 * 
 */

#ifndef Led_Grid_h
#define Led_Grid_h

#include "Arduino.h"
#include "Adafruit_NeoPixel.h"


class LedGrid : protected Adafruit_NeoPixel
{
	public:
		// parameters:
		int r = 0;
		int g = 0;
		int b = 0;
		int brightness_percentage = 100;
		int animation_speed = 1;
		
		// Constructors:
		LedGrid(int width, int height, int pin) : Adafruit_NeoPixel(width * height, pin, NEO_GRB + NEO_KHZ800) {
			WIDTH = width;
			HEIGHT = height;
			pixel_count = width * height;
		}
		
		// Functional Functions
		void set_mode(int mode);
		void update();
		void start_grid();
		
		// Helper functions:
		void set_grid_pixel_color(int x, int y, int red, int green, int blue);
		void set_grid_pixel_color(int x, int y, int rgb);
		void set_grid_pixel_color(int x, int y);
		int get_grid_pixel_color(int x, int y);
		void increment_rgb();
		void alter_rgb_to_percent(float percent);
		void set_fft_raw_data(double *values, int value_number);
		void shift_left();
		void set_time_to_display(int hours, int minutes, boolean AM);
		void draw_time_number(int number, int slot);
		void print_alphabet();
		
		// Light Functions:
		void turn_off();
		void setup_solid_color(int red, int green, int blue, int brightness);
		void setup_breathing_color(int red, int green, int blue, int speed);
		void setup_rainbow(int brightness, int speed);
		void setup_rainbow_wave(int brightness, int speed);
		void setup_sound_visualizer(int brightness);
		void setup_party_mode(int brightness, int speed);
		void setup_text(String text_str, int red, int green, int blue, int brightness, int speed, bool rainbow);
		void setup_time(int red, int green, int blue, int brightness, int speed, bool rainbow);
		void solid_color();
		void breathing_color();
		void rainbow();
		void rainbow_wave();
		void sound_visualizer(double* bins, int bin_number);
		void party_mode();
		void text();
		void time();
	private:
		int WIDTH, HEIGHT, data_pin, pixel_count;
		int dr = 0, dg = 0, db = 0, dbrightness = 0;
		int strip_mode = 0;
		
		// FFT raw value storage
		double max_bin = 250;
		double *vReal;
		int fft_value_number = 128;
		
		// Letters, numbers, and symbols storage.
		int letter_pixel_height = 11;
		int letter_pixel_width = 5;
		String display_string = "";
		int display_string_index = 0;
		int current_letter_column = 0;
		boolean letter_space = false;
		int display_hours = 0;
		int display_minutes = 0;
		bool display_am = true;
		
		uint8_t small_numbers[27] = {
			0xFF, 0x07, 0xF8, 0x0F, 0xE0, 0x27, 0xC9, 0xF3,
			0x26, 0x4F, 0xFF, 0x02, 0x3F, 0xF9, 0x93, 0x3F,
			0xFC, 0x99, 0xF0, 0x20, 0x7F, 0xFF, 0x27, 0xFF,
			0x89, 0x1F, 0xFF
		};
		uint8_t alphabet[448] = {
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
			0x00, 0x07, 0xF9, 0x00, 0x00, 0x00, 0x00, 0x70, 
			0x00, 0x01, 0xC0, 0x00, 0x00, 0x88, 0xFF, 0xE2, 
			0x23, 0xFF, 0x88, 0x80, 0x00, 0x00, 0x00, 0x00, 
			0x00, 0x00, 0x08, 0x1E, 0x8C, 0x22, 0x21, 0x8B, 
			0xC0, 0x9D, 0xF4, 0x41, 0x8E, 0x2E, 0x38, 0x08, 
			0x80, 0x01, 0x00, 0x40, 0x30, 0x00, 0x00, 0x0E, 
			0x06, 0x31, 0x01, 0x40, 0x10, 0x00, 0x00, 0x20, 
			0x0A, 0x02, 0x31, 0x81, 0xC0, 0xA0, 0x08, 0x07, 
			0xC0, 0x20, 0x0A, 0x00, 0x20, 0x04, 0x03, 0xE0, 
			0x10, 0x02, 0x00, 0x00, 0x00, 0x40, 0x10, 0x0C, 
			0x00, 0x00, 0x00, 0x10, 0x02, 0x00, 0x40, 0x00, 
			0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 
			0x00, 0x0E, 0x3E, 0x38, 0x00, 0x00, 0x7F, 0xD0, 
			0x46, 0x10, 0xC4, 0x17, 0xFC, 0x00, 0x50, 0x0F, 
			0xFF, 0x00, 0x20, 0x05, 0x07, 0xC1, 0x18, 0x43, 
			0x10, 0x5C, 0x0A, 0x02, 0x84, 0x30, 0x86, 0x10, 
			0xBD, 0xE1, 0xE0, 0x44, 0x10, 0x87, 0xFF, 0x02, 
			0x1F, 0x06, 0x10, 0xC2, 0x18, 0x43, 0x07, 0x83, 
			0xF1, 0xA1, 0x44, 0x30, 0x86, 0x0F, 0x40, 0x08, 
			0x01, 0x07, 0xE1, 0x07, 0xC0, 0x7B, 0xD0, 0x86, 
			0x10, 0xC2, 0x17, 0xBC, 0xF0, 0x21, 0x04, 0x20, 
			0x84, 0x0F, 0xFC, 0x00, 0x00, 0x03, 0x18, 0x00, 
			0x00, 0x00, 0x00, 0x00, 0x20, 0x08, 0xC6, 0x00, 
			0x00, 0x40, 0x14, 0x04, 0x41, 0x04, 0x40, 0x41, 
			0x40, 0x28, 0x05, 0x00, 0xA0, 0x14, 0x10, 0x11, 
			0x04, 0x11, 0x01, 0x40, 0x10, 0x20, 0x08, 0x01, 
			0x07, 0x61, 0x03, 0xC0, 0x4F, 0x8A, 0x09, 0x7F, 
			0x20, 0x23, 0xF8, 0x3F, 0xD9, 0x04, 0x20, 0x64, 
			0x03, 0xFF, 0xFF, 0xC2, 0x18, 0x43, 0x08, 0x5E, 
			0xF3, 0xFE, 0x80, 0x30, 0x06, 0x00, 0xC0, 0x1F, 
			0xFF, 0x00, 0x60, 0x0C, 0x01, 0x7F, 0xDF, 0xFE, 
			0x10, 0xC2, 0x18, 0x03, 0x00, 0x7F, 0xFC, 0x20, 
			0x84, 0x10, 0x02, 0x00, 0x7F, 0xF8, 0x03, 0x00, 
			0x61, 0x0C, 0x3F, 0xFF, 0xE0, 0x80, 0x10, 0x02, 
			0x0F, 0xFF, 0x00, 0x60, 0x0F, 0xFF, 0x80, 0x30, 
			0x06, 0x02, 0x40, 0x2F, 0xFF, 0x00, 0x20, 0x07, 
			0xFF, 0x04, 0x00, 0x80, 0x28, 0x78, 0xFF, 0xFE, 
			0x00, 0x40, 0x08, 0x01, 0x00, 0x3F, 0xFE, 0x00, 
			0x3F, 0xC8, 0x01, 0xFF, 0xFF, 0xFB, 0x00, 0x1F, 
			0x00, 0x1B, 0xFF, 0xBF, 0xE8, 0x03, 0x00, 0x60, 
			0x0B, 0xFE, 0xFF, 0xF0, 0x82, 0x10, 0x42, 0x07, 
			0x80, 0xFF, 0xA0, 0x4C, 0x05, 0x80, 0x6F, 0xFF, 
			0xFF, 0xC2, 0x08, 0x41, 0x08, 0x1E, 0xFB, 0xC6, 
			0x84, 0x30, 0x86, 0x10, 0xB1, 0xE8, 0x01, 0x00, 
			0x3F, 0xFC, 0x00, 0x80, 0x1F, 0xF8, 0x00, 0x80, 
			0x10, 0x03, 0xFF, 0xBE, 0x00, 0x3C, 0x00, 0x60, 
			0xF3, 0xE0, 0x7F, 0xE0, 0x02, 0x0F, 0x80, 0x0F, 
			0xFE, 0xE0, 0xE3, 0x60, 0x10, 0x0D, 0x8E, 0x0F, 
			0xF0, 0x01, 0x00, 0x1F, 0x04, 0x1F, 0x02, 0x03, 
			0xC1, 0x98, 0x43, 0x30, 0x78, 0x08, 0x00, 0xFF, 
			0xF0, 0x06, 0x00, 0x80, 0x00, 0x01, 0xC0, 0x07, 
			0xC0, 0x07, 0x00, 0x00, 0x02, 0x00, 0xC0, 0x1F, 
			0xFE, 0x00, 0x08, 0x02, 0x00, 0x80, 0x08, 0x00, 
			0x80, 0x00, 0x10, 0x02, 0x00, 0x40, 0x08, 0x01, 
			0x40, 0x08, 0x00, 0x80, 0x08, 0x01
		};
};

#endif